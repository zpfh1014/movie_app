{"version":3,"sources":["Movie.js","App.js","registerServiceWorker.js","index.js"],"names":["Movie","className","this","props","rank","src","poster","alt","title","text","summary","maxLine","ellipsis","trimRight","basedOn","Component","App","state","_renderMovies","movies","map","movie","medium_cover_image","key","id","_getMovies","a","async","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uQAmCeA,E,iLApBP,OACI,4BACI,0BAAMC,UAAU,QAAQC,KAAKC,MAAMC,MACnC,0BAAMH,UAAU,cAAa,yBAAKI,IAAKH,KAAKC,MAAMG,OAAQC,IAAI,oCAA9D,KACA,yBAAKN,UAAU,eACf,0BAAMA,UAAU,SAASC,KAAKC,MAAMK,OAChC,kBAAC,IAAD,CACIC,KAAMP,KAAKC,MAAMO,QACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,kB,GApBZC,aCyCLC,E,2MAvCbC,MAAQ,G,EAMRC,cAAgB,WAId,OAHe,EAAKD,MAAME,OAAOC,KAAI,SAAAC,GACnC,OAAO,kBAAC,EAAD,CAAOb,MAAOa,EAAMb,MAAOF,OAAQe,EAAMC,mBAAoBC,IAAKF,EAAMG,GAAId,QAASW,EAAMX,c,EAKtGe,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,sC,EAObS,SAAW,WACV,OAAOE,MAAM,iEACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFArB1BlC,KAAKuB,e,+BAyBL,OACE,yBAAKxB,UAAU,OACb,4EACA,wBAAIA,UAAU,cACXC,KAAKe,MAAME,OAASjB,KAAKgB,gBAAkB,gB,GAjCpCH,aCGZwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTf,MAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf8B,UAAUC,cAAcO,WAK1BlB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAAqB,GACLnB,QAAQmB,MAAM,4CAA6CA,MCxEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,GAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,GAAN,sBAEPvB,IAiDV,SAAiCO,GAE/BhB,MAAMgB,GACHf,MAAK,SAAAC,GAGkB,MAApBA,EAASiC,SACuD,IAAhEjC,EAASkC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMtC,MAAK,SAAAmB,GACjCA,EAAaoB,aAAavC,MAAK,WAC7BU,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBX,OAAM,WACLE,QAAQC,IACN,oEArEAkC,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMtC,MAAK,WACjCM,QAAQC,IACN,gHAMJO,EAAgBC,OCxCxB2B,I","file":"static/js/main.392a5bc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './reset.css';\r\nimport './App.css';\r\n\r\nclass Movie extends Component {\r\n\r\n    // title, poster 필수로 설정\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster : PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <li>\r\n                <span className=\"rank\">{this.props.rank}</span>   \r\n                <span className=\"poster_img\"><img src={this.props.poster} alt=\"영화 포스터\" /> </span>\r\n                <div className=\"poster_info\">\r\n                <span className=\"title\">{this.props.title}</span>                 \r\n                    <LinesEllipsis\r\n                        text={this.props.summary}\r\n                        maxLine='5'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Movie;\r\n","import React, { Component } from 'react';\nimport './reset.css';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\nclass App extends Component {\n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie title={movie.title} poster={movie.medium_cover_image} key={movie.id} summary={movie.summary} />\n    })\n    return movies\n  }\n\n  _getMovies = async() => {\n    const movies = await this._callApi(); \n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n   return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>영화 다운로드 BEST10</h1>\n        <ul className=\"movie_list\">\n          {this.state.movies ? this._renderMovies() : 'Loading'}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './reset.css';\nimport './App.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}